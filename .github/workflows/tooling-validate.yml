name: Tooling Validate

on:
  workflow_call:
    secrets:
      # #region secrets
      codecov-token:
        description: Token to be used to upload test coverage data to Codecov.
        required: false
      # #endregion secrets
    inputs:
      # #region inputs
      go-version:
        description: The go version to use for the build.
        required: true
        type: string
      go-versions:
        description: The go versions to use for running the tests. JSON string array (e.g. ["1.24.x", "1.23.x"])
        required: true
        type: string
      platforms:
        description: Platforms to be used to run the tests. JSON string array (e.g. ["ubuntu-latest","macos-latest"])
        required: true
        type: string
      golangci-lint-version:
        description: The golangci-lint version to use for static analysis.
        required: true
        type: string
      goreleaser-version:
        description: The version of GoReleaser to use for builds and releases.
        required: true
        type: string
      k6-versions:
        description: The k6 versions to be used for integration tests. JSON string array (e.g. ["v0.57.0","v0.56.0"])
        required: false
        default: '["latest"]'
        type: string
      bats:
        description: The bats scripts to use for integration testing. Space-separated file names or patterns.
        type: string
        required: false
      # #endregion inputs

jobs:
  config:
    name: Config
    runs-on: ubuntu-latest
    outputs:
      devcontainer: ${{steps.configure.outputs.devcontainer}}
      codecov: ${{steps.configure.outputs.codecov}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Configure
        id: configure
        run: |
          if [ -n "${{secrets.codecov-token}}" ] ; then
            echo "codecov=true" >> $GITHUB_OUTPUT
          fi
          if [ -f ".devcontainer/devcontainer.json" ]; then
            echo "devcontainer=true" >> $GITHUB_OUTPUT
          fi
      - name: Summary
        shell: bash
        env:
          GO_VERSION: ${{inputs.go-version}}
          GO_VERSIONS: ${{ join(fromJSON(inputs.go-versions),' ') }}
          GOLANGCI_LINT_VERSION: ${{inputs.golangci-lint-version}}
          GORELEASER_VERSION: ${{inputs.goreleaser-version}}
          K6_VERSIONS: ${{ join(fromJSON(inputs.k6-versions),' ') }}
          PLATFORMS: ${{ join(fromJSON(inputs.platforms),' ') }}
          CODECOV: ${{steps.configure.outputs.codecov}}
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<END

          ### Configuration

          Description           | Value
          ----------------------|--------------------------------
          go version for build  | ${GO_VERSION}
          go versions for test  | ${GO_VERSIONS}
          platforms for test    | ${PLATFORMS}
          golangci-lint version | ${GOLANGCI_LINT_VERSION}
          GoReleaser version    | ${GORELEASER_VERSION}
          k6 versions for test  | ${K6_VERSIONS}

          END

          if [ -n "${CODECOV}" ]; then
            echo "Coverage data will be uploaded to Codecov." >> $GITHUB_STEP_SUMMARY
          fi

  security:
    name: Security
    runs-on: ubuntu-latest
    needs: ["config"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Gosec Security Scanner
        uses: securego/gosec@d2d3ae66bd8d340b78b5142b6fe610691783c2fe # v2.22.5
        with:
          args: ./...

      - name: Run Vulnerability Checker
        id: govulncheck
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # v1.0.4
        with:
          go-version-input: ${{inputs.go-version}}
          go-package: ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: ["security"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{ inputs.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: "${{ inputs.go-version }}"

      - name: Check module dependencies
        shell: bash
        run: |
          go version
          test -z "$(go mod tidy && git status go.* --porcelain)"
          go mod verify

      - name: Run minimal golangci-lint ${{ inputs.golangci-lint-version }}
        if: ${{ hashFiles('.golangci.yml','.golangci.yaml','.golangci.toml','.golangci.json') == ''}}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: "${{ inputs.golangci-lint-version }}"
          args: --timeout=30m --no-config

      - name: Run configured golangci-lint ${{ inputs.golangci-lint-version }}
        if: ${{ hashFiles('.golangci.yml','.golangci.yaml','.golangci.toml','.golangci.json') != ''}}
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: "${{ inputs.golangci-lint-version }}"
          only-new-issues: true
          args: --timeout=30m

  smoke:
    name: Smoke
    runs-on: ubuntu-latest
    needs: ["security"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{ inputs.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: "${{ inputs.go-version }}"

      - name: Run tests
        run: |
          go test -short -timeout 2m ./...

  test:
    name: Test
    needs:
      - lint
      - smoke
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJSON(inputs.go-versions) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Run tests
        run: |
          go test -race -timeout 2m ./...

  build:
    name: Build
    needs:
      - lint
      - smoke
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJSON(inputs.go-versions) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Setup Bats
        if: ${{ inputs.bats != '' && runner.os == 'Linux' }}
        uses: bats-core/bats-action@42fcc8700f773c075a16a90eb11674c0318ad507 # 3.0.1
        with:
          bats-version: "1.11.1"

      - name: GoReleaser build
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          version: "${{ inputs.goreleaser-version }}"
          # #region build-args
          args: build --clean --snapshot --single-target
          # #endregion build-args

      - name: Integration Test
        if: ${{ inputs.bats != '' && runner.os == 'Linux' }}
        env:
          K6_VERSIONS: ${{ join(fromJSON(inputs.k6-versions),' ') }}
          BATS: ${{ inputs.bats }}
        shell: bash
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<END

          ### Integration Test

          END

          set -e
          bats ${BATS} | tee -a $GITHUB_STEP_SUMMARY

  report:
    name: Report
    needs:
      - config
      - test
      - build
    if: ${{ (github.ref_name == 'main' || github.ref_name == 'master') && (needs.config.outputs.codecov == 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Go ${{inputs.go-version}}
        uses: actions/setup-go@v5
        with:
          go-version: "${{inputs.go-version}}"

      - name: Test
        run: go test -count 1 -coverprofile=coverage.txt ./...

      - name: Upload Coverage
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{secrets.codecov-token}}
          slug: ${{github.repository}}

      - name: Generate Go Report Card
        uses: creekorful/goreportcard-action@1f35ced8cdac2cba28c9a2f2288a16aacfd507f9 # v1.0

  devcontainer:
    name: DevContainer
    needs: ["config"]
    if: ${{ needs.config.outputs.devcontainer }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      GO_VERSION: ""
      GOLANGCI_LINT_VERSION: ""
      GORELEASER_VERSION: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Config
        run: |
          cat .devcontainer/devcontainer.json | jq -r '
            {
              GO_VERSION: .features["ghcr.io/devcontainers/features/go:1"]["version"],
              GOLANGCI_LINT_VERSION: .features["ghcr.io/devcontainers/features/go:1"]["golangciLintVersion"],
              GORELEASER_VERSION: .features["ghcr.io/guiyomh/features/goreleaser:0"]["version"]
            } | to_entries | map("\(.key)=\(.value|tostring)")|.[]' >> "$GITHUB_ENV"

      - name: Check go version ${{inputs.go-version}}
        shell: bash
        env:
          INPUT_GO_VERSION: ${{ inputs.go-version }}
        run: |
          if [ ! "${{env.GO_VERSION}}" == "$(echo ${INPUT_GO_VERSION}|sed -e 's/\.x//g')" ]; then
            echo "::error::Mismatched go versions in devcontainers.json and workflow input"
            exit 1
          fi

      - name: Check golangci-lint version ${{inputs.golangci-lint-version}}
        shell: bash
        env:
          INPUT_GOLANGCI_LINT_VERSION: ${{ inputs.golangci-lint-version }}
        run: |
          if [ ! "${{env.GOLANGCI_LINT_VERSION}}" == "$(echo ${INPUT_GOLANGCI_LINT_VERSION}|sed -e 's/v//g')" ]; then
            echo "::error::Mismatched golangci-lint versions in devcontainers.json and workflow input"
            exit 1
          fi

      - name: Check goreleaser version ${{inputs.goreleaser-version}}
        shell: bash
        env:
          INPUT_GORELEASER_VERSION: ${{ inputs.goreleaser-version }}
        run: |
          if [ ! "${{env.GORELEASER_VERSION}}" == "${INPUT_GORELEASER_VERSION}" ]; then
            echo "::error::Mismatched goreleaser versions in devcontainers.json and workflow input"
          fi
