// Package main is a tool to generate compliance preset files.
package main

import (
	"os"
	"path/filepath"
	"text/template"

	sprig "github.com/go-task/slim-sprig/v3"
	"go.k6.io/xk6/internal/lint"
	"gopkg.in/yaml.v3"
)

func readDefinitions() ([]lint.PresetDefinition, []lint.CheckDefinition, error) {
	var (
		presets []lint.PresetDefinition
		checks  []lint.CheckDefinition
	)

	data, err := os.ReadFile("docs/presets.yml")
	if err != nil {
		return nil, nil, err
	}

	if err := yaml.Unmarshal(data, &presets); err != nil {
		return nil, nil, err
	}

	data, err = os.ReadFile("docs/checks.yml")
	if err != nil {
		return nil, nil, err
	}

	if err := yaml.Unmarshal(data, &checks); err != nil {
		return nil, nil, err
	}

	return presets, checks, nil
}

const presetsDocTemplate = `Available Presets

The following presets are available for use with the ` + "`" + `xk6 lint` + "`" + ` command.

{{ range . -}}

**` + "`" + `{{ .ID }}` + "`" + `**

{{ .Description | trim }}

Included Checks:

  {{- if .Checks }}
  {{- range .Checks }}
  - ` + "`" + `{{ . }}` + "`" + `
  {{- end }}
  {{- else }}
_No checks included in this preset._
  {{- end }}

{{ end -}}
`

const presetsCodeTemplate = `// Code generated by tools/presetter; DO NOT EDIT.
package lint

import (
	"fmt"
	"os"
)

var PresetDefinitions = []PresetDefinition{
{{- range . }}
    {
        ID:          PresetID{{ printf "%s" .ID | title }},
        Description: {{ .Description | trim | printf "%q" }},
        Checks:     []CheckID{
            {{- range .Checks }}
            CheckID{{ printf "%s" . | title }},
            {{- end }}
        },
    },
{{- end }}
}

var PresetIDs = []PresetID{
{{- range . }}
    PresetID{{ printf "%s" .ID | title }},
{{- end }}
}

// ParsePresetID parses preset name from string.
func ParsePresetID(val string) (PresetID, error) {
	v := PresetID(val)

	switch v {
	case
{{- range $i, $v := . }}
        PresetID{{ printf "%s" $v.ID | title }}{{ if ne (add $i 1) (len $) }},{{ end }}
{{- end }}:
		return v, nil
	default:
		return "", fmt.Errorf("%w: %s", os.ErrInvalid, val)
	}
}
`

const checksDocTemplate = `Available Checks

The following checks are available for use with the ` + "`" + `xk6 lint` + "`" + ` command.

{{ range . -}}
**` + "`" + `{{ .ID }}` + "`" + `**

{{ .Description | trim }}

_{{ .Rationale | trim }}_

Resolution

{{ .Resolution }}
{{ end -}}
`

const checkCodeTemplate = `// Code generated by tools/presetter; DO NOT EDIT.
package lint

import (
	"fmt"
	"os"
)

var CheckDefinitions = []CheckDefinition{
{{- range . }}
    {
        ID:          CheckID{{ printf "%s" .ID | title }},
        Description: {{ .Description | trim | printf "%q" }},
        Rationale:   {{ .Rationale | trim  | printf "%q" }},
        Resolution:  {{ .Resolution | trim  | printf "%q" }},
    },
{{- end }}
}

var CheckIDs = []CheckID{
{{- range . }}
    CheckID{{ printf "%s" .ID | title }},
{{- end }}
}

// ParseCheckID parses CheckID id from string.
func ParseCheckID(val string) (CheckID, error) {
	v := CheckID(val)

	switch v {
	case
{{- range $i, $v := . }}
        CheckID{{ printf "%s" $v.ID | title }}{{ if ne (add $i 1) (len $) }},{{ end }}
{{- end }}:
		return v, nil
	default:
		return "", fmt.Errorf("%w: %s", os.ErrInvalid, val)
	}
}

`

func generate(data any, tmpl string, filename string) error {
	t, err := template.New("presetter").Funcs(sprig.FuncMap()).Parse(tmpl)
	if err != nil {
		return err
	}

	f, err := os.Create(filepath.Clean(filename))
	if err != nil {
		return err
	}

	defer f.Close() //nolint:errcheck

	return t.Execute(f, data)
}

func checkerr(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	presets, checks, err := readDefinitions()
	checkerr(err)

	checkerr(generate(presets, presetsDocTemplate, "internal/cmd/help/presets.md"))
	checkerr(generate(checks, checksDocTemplate, "internal/cmd/help/checks.md"))
	checkerr(generate(presets, presetsCodeTemplate, "internal/lint/preset_gen.go"))
	checkerr(generate(checks, checkCodeTemplate, "internal/lint/check_gen.go"))
}
