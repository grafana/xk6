// Code generated by tools/presetter; DO NOT EDIT.
package lint

import (
	"fmt"
	"os"
)

var PresetDefinitions = []PresetDefinition{
    {
        ID:          PresetIDAll,
        Description: "Comprehensive preset that includes every available check in the xk6 linting system. Serves as a complete reference for all possible compliance checks and provides maximum validation coverage for development and testing purposes.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDReplace,
            CheckIDReadme,
            CheckIDLicense,
            CheckIDGit,
            CheckIDVersions,
            CheckIDBuild,
            CheckIDSmoke,
            CheckIDExamples,
            CheckIDTypes,
            CheckIDCodeowners,
        },
    },
    {
        ID:          PresetIDLoose,
        Description: "Minimal preset focusing on essential quality and security compliance checks. Designed for development environments and initial extension development phases. Provides basic compliance requirements without restrictive validation that slows development cycles. This is the default preset.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDReadme,
            CheckIDLicense,
            CheckIDGit,
            CheckIDVersions,
            CheckIDBuild,
        },
    },
    {
        ID:          PresetIDStrict,
        Description: "Comprehensive preset for production-ready extensions, including all compliance checks except those reserved for official Grafana extensions (such as codeowners validation). Designed for third-party extensions that require high quality standards before release.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDReplace,
            CheckIDReadme,
            CheckIDLicense,
            CheckIDGit,
            CheckIDVersions,
            CheckIDBuild,
            CheckIDSmoke,
            CheckIDExamples,
            CheckIDTypes,
        },
    },
    {
        ID:          PresetIDPrivate,
        Description: "Lightweight preset designed for private or internal extension development. Focuses on core security and functionality compliance while omitting documentation and public-facing requirements such as README formatting and licensing compliance.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDGit,
        },
    },
    {
        ID:          PresetIDCommunity,
        Description: "Balanced preset tailored for community-contributed extension development. Includes essential quality, security, and documentation compliance to ensure extensions meet community standards while remaining accessible to contributors.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDReadme,
            CheckIDLicense,
            CheckIDGit,
            CheckIDVersions,
            CheckIDBuild,
        },
    },
    {
        ID:          PresetIDOfficial,
        Description: "Most stringent preset for official Grafana-maintained extension development. Enforces the highest quality standards including code ownership compliance, comprehensive testing requirements, and complete documentation compliance.",
        Checks:     []CheckID{
            CheckIDSecurity,
            CheckIDVulnerability,
            CheckIDModule,
            CheckIDReplace,
            CheckIDReadme,
            CheckIDLicense,
            CheckIDGit,
            CheckIDVersions,
            CheckIDBuild,
            CheckIDSmoke,
            CheckIDExamples,
            CheckIDTypes,
            CheckIDCodeowners,
        },
    },
}

var PresetIDs = []PresetID{
    PresetIDAll,
    PresetIDLoose,
    PresetIDStrict,
    PresetIDPrivate,
    PresetIDCommunity,
    PresetIDOfficial,
}

// ParsePresetID parses preset name from string.
func ParsePresetID(val string) (PresetID, error) {
	v := PresetID(val)

	switch v {
	case
        PresetIDAll,
        PresetIDLoose,
        PresetIDStrict,
        PresetIDPrivate,
        PresetIDCommunity,
        PresetIDOfficial:
		return v, nil
	default:
		return "", fmt.Errorf("%w: %s", os.ErrInvalid, val)
	}
}
